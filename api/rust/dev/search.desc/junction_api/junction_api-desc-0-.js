searchState.loadedDescShard("junction_api", 0, "The core implementation for Junction - an xDS …\nA DNS hostname.\nA DNS name to target with traffic.\nA wrapper around std::time::Duration that serializes to …\nAn error converting a Junction API type into another type.\nA fraction, expressed as a numerator and a denominator.\nAN RFC 1123 DNS domain name.\nA Kubernetes Service.\nA Kubernetes Service to target with traffic.\nAn RFC 1035 compatible name. This name must be useable as …\nA regular expression.\nA uniquely identifiable service that traffic can be routed …\nClone and convert this backend into a BackendId with the …\nBackends are the logical target of network traffic. They …\nCreate a new DNS target. The given name must be a valid …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>Duration</code> from a whole number of microseconds. …\nCreate a new <code>Duration</code> from a whole number of milliseconds. …\nCreate a new <code>Duration</code> from a whole number of seconds. See …\nCreate a new <code>Duration</code> from a floating point number of …\nCreate a new <code>Duration</code> from a floating point number of …\nCreate a new hostname from a static string.\nCreate a new name from a static string.\nThe canonical hostname for this backend.\nA valid RFC1123 DNS domain name.\nHTTP Route configuration. Routes dynamically congfigure …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTypes and re-exports for converting Junction types to …\nCreate a new Kubernetes Service target.\nThe canonical name of this backend.\nThe name of the Kubernetes Service to target.\nThe namespace of the Kubernetes service to target. This …\nA Backend is a logical target for network traffic.\nA Backend is uniquely identifiable by a combination of …\nHash the value of a header. If the header has multiple …\nA policy describing how traffic to this target should be …\nHash the value of an HTTP query parameter.\nUse a ketama-style consistent hashing algorithm to route …\nPolicy for configuring a ketama-style consistent hashing …\nA simple round robin load balancing policy. Endpoints are …\nNo load balancing algorithm was specified. Clients may …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRead one or more Backends from a Kubernetes Service. A …\nHow to hash an outgoing request into the ring.\nA unique identifier for this backend.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if this policy is LbPolicy::Unspecified.\nHow traffic to this target should be load balanced.\nThe minimum size of the hash ring\nThe cannonical name of this ID. This is an alias for the …\nThe port backend traffic is sent on.\nThe logical traffic target that this backend configures.\nWhether to stop immediately after hashing this value.\nGenerate a partial Service from this backend.\nThe name of the header to use as hash input.\nThe name of the query parameter to hash\nAn exact match for a hostname.\nDefines configuration for the RequestHeaderModifier filter.\nDescribes how to select a HTTP route by matching HTTP …\nThe name of an HTTP header.\nA matcher for URL hostnames.\nDescribes how to select a HTTP route by matching the HTTP …\nDescribes how to select a HTTP route by matching the HTTP …\nDefines configuration for path modifiers.\nDescribes how to select a HTTP route by matching HTTP …\nSpecifies the value with which to replace the full path of …\nSpecifies the value with which to replace the prefix match …\nDefines a schema for a filter that modifies request …\nDefines a schema for a filter that mirrors requests. …\nDefines configuration for the RequestMirror filter.\nDefines a schema for a filter that responds to the request …\nDefines a filter that redirects a request. This filter …\nDefines a schema for a filter that modifies response …\nA Route is a policy that describes how a request to a …\nDefines processing steps that must be completed during the …\nDefines the predicate used to match requests to a given …\nConfigure client retry policy.\nA RouteRule contains a set of matches that define which …\nDefines timeouts that can be configured for a HTTP Route.\nMatches any valid subdomain of this hostname.\nDefines a schema for a filter that modifies a request …\nDefines a filter that modifies a request during …\nAdd adds the given header(s) (name, value) to the request …\nThe total number of attempts to make when retrying this …\nSpecifies a timeout for an individual request to a …\nWhere the traffic should route if this rule matches.\nThe amount of time to back off between requests during a …\nThe HTTP error codes that retries should be applied to.\nReturn a PathMatch that matches the empty prefix.\nOnly one of Fraction or Percent may be specified. If …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a Gateway API HTTPRoute into a Junction Route.\nSpecifies HTTP request header matchers. Multiple match …\nThe hostname to be used in the value of the <code>Location</code> …\nThe value to be used to replace the Host header value …\nThe hostnames that match this Route.\nA globally unique identifier for this Route.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if hostname is matched by this matcher.\nA list of match rules applied to an outgoing request.  …\nReturns true if the string s is a valid hostname and …\nSpecifies HTTP method matcher. When specified, this route …\nA human-readable name for this rule.\nThe name of the HTTP Header. Note header names are case …\nCreate a trivial route that passes all traffic for a …\nSpecifies a HTTP request path matcher.\nDefines parameters used to modify the path of the incoming …\nDefines a path rewrite.\nRepresents the percentage of requests that should be …\nThe port to be used in the value of the <code>Location</code> header in …\nThe port to route traffic to, used in combination with …\nThe ports that match this Route.\nSpecifies HTTP query parameter matchers. Multiple match …\nRemove the given header(s) from the HTTP request before …\nSpecifies the maximum duration for a HTTP request. This …\nHow to retry requests. If not specified, requests are not …\nThe rules that determine whether a request matches and …\nThe scheme to be used in the value of the <code>Location</code> header …\nThe Serivce to route to when traffic matches. This Service …\nOverwrites the request with the given header (name, value) …\nThe HTTP status code to be used in response.\nA list of arbitrary tags that can be added to a Route.\nConvert this Route to a Gateway API HTTPRoute.\nThe value of HTTP Header.\nThe relative weight of this backend relative to any other …\nThe value to replace the path with.\nA Header filter.\nA redirect filter.\nA Header filter.\nA URL rewrite filter.")