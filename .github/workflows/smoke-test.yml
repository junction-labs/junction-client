# run a smoke test of junction against the latest ezbake image
#
# this builds a wheel at the current version, installs it in the most vanilla
# python image possible, and then runs the tests in a k3d cluster.
#
# at some point it should be possible to re-use this wheel to run pytests
# and combine this job with junction-python-ci.
name: smoke test

on:
  push:
    branches: [ "main" ]
    paths:
      - "junction-python/**"
      - "crates/**"
      - ".github/workflows/smoke-test.yml"

  pull_request:
    branches: [ "main" ]
    paths:
      - "junction-python/**"
      - "crates/**"
      - ".github/workflows/smoke-test.yml"

env:
  CARGO_TERM_COLOR: always
  rust_stable: stable
  rust_min: 1.79

jobs:
  build-wheel:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: 3.x
    - name: build wheels
      uses: PyO3/maturin-action@v1
      with:
        target: x86_64
        args: --release --out dist --manifest-path junction-python/Cargo.toml
        sccache: 'true'
        manylinux: auto
    - name: upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-linux-x86_64
        path: dist/*.whl

  smoke-test:
    runs-on: ubuntu-latest
    needs: [build-wheel]
    steps:
      - name: checkout code
        uses: actions/checkout@master
      - uses: actions/download-artifact@v4
        with:
          path: dist
      - uses: AbsaOSS/k3d-action@v2
        name: "Create single k3d Cluster with imported Registry"
        with:
          cluster-name: test-cluster
          args: >-
            --agents 1
            --no-lb
            --k3s-arg "--no-deploy=traefik,servicelb,metrics-server@server:*"
      - name: build server
        run: |
          docker build --tag jct_http_server:latest \
              --file junction-python/samples/routing-and-load-balancing/Dockerfile-server .
          k3d image import jct_http_server:latest -c test-cluster
      - name: build client
        run: |
          docker build --tag jct_http_client:latest \
            --file junction-python/samples/routing-and-load-balancing/Dockerfile-client . \
            --build-arg junction_wheel=dist/**/*.whl
          k3d image import jct_http_client:latest -c test-cluster
      - name: set up kube manifests
        run: |
          kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.2.0/experimental-install.yaml
          kubectl apply -f junction-python/samples/routing-and-load-balancing/latest_ezbake.yml
          kubectl apply -f junction-python/samples/routing-and-load-balancing/jct_http_server.yml
          kubectl apply -f junction-python/samples/routing-and-load-balancing/jct_http_server_feature_1.yml
      - name: wait for rollouts
        run: |
          kubectl rollout status --watch -n default deploy/jct-http-server
          kubectl rollout status --watch -n default deploy/jct-http-server-feature-1
          kubectl rollout status --watch -n junction deploy/ezbake
          sleep 5 # this is a load-bearing sleep, we're waiting for ezbake to settle down
      - name: run tests static mode
        run: |
          kubectl run jct-client --image=jct_http_client:latest --image-pull-policy=IfNotPresent --env="JUNCTION_ADS_SERVER=grpc://ezbake.junction.svc.cluster.local:8008" --restart=Never --attach
      - name: run tests gateway api mode
        run: |
          kubectl run jct-client --image=jct_http_client:latest --image-pull-policy=IfNotPresent --env="JUNCTION_ADS_SERVER=grpc://ezbake.junction.svc.cluster.local:8008" --restart=Never --attach -- --use-gateway-api
      - name: debug state
        if: ${{ ! cancelled() }}
        run: |
            docker images -a
            docker ps -a
            kubectl get pods -o wide --all-namespaces
            kubectl get svc -o wide --all-namespaces
            kubectl get po -n junction -o jsonpath='{.items[].metadata.name}' | xargs -IQ kubectl logs -n junction Q
